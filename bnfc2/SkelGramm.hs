module SkelGramm where

-- Haskell module generated by the BNF converter

import AbsGramm
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transPTrue :: PTrue -> Result
transPTrue x = case x of
  PTrue string -> failure x
transPFalse :: PFalse -> Result
transPFalse x = case x of
  PFalse string -> failure x
transPReturn :: PReturn -> Result
transPReturn x = case x of
  PReturn string -> failure x
transPNull :: PNull -> Result
transPNull x = case x of
  PNull string -> failure x
transPIdent :: PIdent -> Result
transPIdent x = case x of
  PIdent string -> failure x
transPFloat :: PFloat -> Result
transPFloat x = case x of
  PFloat string -> failure x
transPInteger :: PInteger -> Result
transPInteger x = case x of
  PInteger string -> failure x
transPString :: PString -> Result
transPString x = case x of
  PString string -> failure x
transPChar :: PChar -> Result
transPChar x = case x of
  PChar string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog declarations -> failure x
transTypeSpec :: TypeSpec -> Result
transTypeSpec x = case x of
  TSimple stype -> failure x
  TPointer typespec -> failure x
  TArray typespec exp -> failure x
transSType :: SType -> Result
transSType x = case x of
  SType_Float -> failure x
  SType_Int -> failure x
  SType_Char -> failure x
  SType_String -> failure x
  SType_Bool -> failure x
  TypeNull -> failure x
transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  DecVar pident typespec -> failure x
  DefVar pident typespec exp -> failure x
  DefProc pident paramclauses block -> failure x
  DefFun pident paramclauses typespec body -> failure x
transParamClause :: ParamClause -> Result
transParamClause x = case x of
  PArg args -> failure x
transBody :: Body -> Result
transBody x = case x of
  EBody exp -> failure x
  SBody block -> failure x
transArg :: Arg -> Result
transArg x = case x of
  DArg pident typespec -> failure x
transOp :: Op -> Result
transOp x = case x of
  Or -> failure x
  And -> failure x
  Less -> failure x
  LessEq -> failure x
  Greater -> failure x
  GreterEq -> failure x
  Equal -> failure x
  NotEq -> failure x
  Plus -> failure x
  Minus -> failure x
  Prod -> failure x
  Div -> failure x
  Mod -> failure x
  Pow -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EArray exps -> failure x
  ENot exp -> failure x
  ENeg exp -> failure x
  ELExp lexp -> failure x
  EDeref lexp -> failure x
  EInt pinteger -> failure x
  EFloat pfloat -> failure x
  EChar pchar -> failure x
  EString pstring -> failure x
  ETrue ptrue -> failure x
  EFalse pfalse -> failure x
  ENull pnull -> failure x
  EOp exp1 op exp2 -> failure x
  ETyped exp typespec -> failure x
  EVarTyped pident typespec pinteger1 pinteger2 -> failure x
transStm :: Stm -> Result
transStm x = case x of
  Decla declaration -> failure x
  Expr exp -> failure x
  SBlock block -> failure x
  Assign lexp exp -> failure x
  While exp stm -> failure x
  If exp stm1 stm2 -> failure x
  Return preturn -> failure x
  ReturnExp preturn exp -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  DBlock stms -> failure x
transLExp :: LExp -> Result
transLExp x = case x of
  LRef lexp -> failure x
  LArr lexp exp -> failure x
  LIdent pident -> failure x


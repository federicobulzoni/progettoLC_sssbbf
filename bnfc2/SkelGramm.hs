module SkelGramm where

-- Haskell module generated by the BNF converter

import AbsGramm
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog decls -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DFunInLine id argss type_ exp -> failure x
  DecVar id type_ -> failure x
  DefVar id type_ exp -> failure x
transArgs :: Args -> Result
transArgs x = case x of
  DArgs args -> failure x
transArg :: Arg -> Result
transArg x = case x of
  DArg id type_ -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EInt integer -> failure x
  EVar id -> failure x
  ETyped exp type_ -> failure x
transType :: Type -> Result
transType x = case x of
  Type_float -> failure x
  Type_int -> failure x
transStm :: Stm -> Result
transStm x = case x of
  Decla decl -> failure x
  Expr exp -> failure x
  SBlock block -> failure x
  Assign id exp -> failure x
  While exp stm -> failure x
  If exp stm1 stm2 -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  DBlock stms -> failure x


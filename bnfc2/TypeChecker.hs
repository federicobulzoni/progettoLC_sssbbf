module TypeChecker where

-- Haskell module generated by the BNF converter

import AbsGramm
import ErrM
import Environment
import PrintGramm

type Result = Err Env

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

typeCheck :: Program -> Err ()
typeCheck (Prog decls) = checkDecls emptyEnv decls

checkDecls :: Env -> [Decl] -> Err ()
checkDecls env [] = return ()
checkDecls env (decl:decls) = do
 env' <- checkDecl env decl
 checkDecls env' decls

checkDecl :: Env -> Decl -> Err Env
checkDecl env decl = case decl of
  --  DecVar Id Type
  DecVar id typ -> updateVar env id typ
  --  DefVar Id Type Exp
  DefVar id typ exp -> do 
    env' <- updateVar env id typ
    checkExp env' exp typ 
    return env'


checkExp :: Env -> Exp -> Type -> Err ()
checkExp env exp typ = do
  typ' <- inferExp env exp
  if typ' == typ
    then return ()
  else 
   error $ printTree exp ++ " Ã¨ di tipo " ++ printTree typ' 
   ++ ", ma il tipo aspettato e' " ++ printTree typ ++ "\n"

inferExp :: Env -> Exp -> Err Type
inferExp env exp = case exp of
  EAdd exp1 exp2 -> do 
    t1 <- inferExp env exp1
    t2 <- inferExp env exp2
    if t1 == t2
      then 
        return t1
      else 
        error $ "operatori di tipo diverso: " ++ 
        printTree exp1 ++ " ha tipo: " ++ show t1 ++
        ", " ++ printTree exp2 ++ " ha tipo: " ++ show t2
        ++ ".\n"
  EInt n -> return Type_int
  EVar id -> do
    t1 <- lookupVar env id
    return t1

  {-

transId :: Id -> Result
transId x = case x of
  Id string -> failure x

  
transDecl :: Decl -> Result
transDecl x = case x of
  DFunInLine id argss type_ exp -> failure x
  DFunBlock id argss type_ block -> failure x
  DecVar id type_ -> failure x
  DefVar id type_ exp -> failure x
transArgs :: Args -> Result
transArgs x = case x of
  DArgs args -> failure x
transArg :: Arg -> Result
transArg x = case x of
  DArg id type_ -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EInt integer -> failure x
  EVar id -> failure x
transType :: Type -> Result
transType x = case x of
  Type_float -> failure x
  Type_int -> failure x
transStm :: Stm -> Result
transStm x = case x of
  Decla decl -> failure x
  Expr exp -> failure x
  SBlock block -> failure x
  Assign id exp -> failure x
  While exp stm -> failure x
  If exp stm1 stm2 -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  DBlock stms -> failure x
-}

-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from ParGramm.y
-----------------------------------------------------------------------------

state 12 contains 1 reduce/reduce conflicts.
state 13 contains 1 reduce/reduce conflicts.
state 20 contains 1 reduce/reduce conflicts.
state 21 contains 1 reduce/reduce conflicts.
state 25 contains 1 reduce/reduce conflicts.

rule 10 is unused
rule 14 is unused
rule 15 is unused
rule 29 is unused
rule 30 is unused
rule 31 is unused
rule 32 is unused
rule 33 is unused
rule 36 is unused
rule 37 is unused
rule 38 is unused
rule 39 is unused
rule 40 is unused
rule 41 is unused
rule 42 is unused

terminal ';' is unused
terminal 'else' is unused
terminal 'if' is unused
terminal 'while' is unused
terminal '{' is unused
terminal '}' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Integer -> L_integ                                 (1)
	Id -> L_Id                                         (2)
	Program -> ListDecl                                (3)
	ListDecl ->                                        (4)
	ListDecl -> ListDecl Decl                          (5)
	Decl -> 'def' Id ListArgs ':' Type '=' Exp         (6)
	Decl -> 'var' Id ':' Type                          (7)
	Decl -> 'var' Id ':' Type '=' Exp                  (8)
	ListArgs ->                                        (9)
	ListArgs -> Args ListArgs                          (10)
	ListArgs -> Args                                   (11)
	ListArgs -> Args ListArgs                          (12)
	Args -> '(' ListArg ')'                            (13)
	ListArg ->                                         (14)
	ListArg -> Arg                                     (15)
	ListArg -> Arg ',' ListArg                         (16)
	ListArg ->                                         (17)
	ListArg -> Arg ListArg                             (18)
	Arg -> Id ':' Type                                 (19)
	Exp -> Exp '+' Exp1                                (20)
	Exp -> Exp '-' Exp1                                (21)
	Exp -> Exp1                                        (22)
	Exp1 -> Exp1 '*' Exp2                              (23)
	Exp1 -> Exp1 '/' Exp2                              (24)
	Exp1 -> Exp2                                       (25)
	Exp2 -> Integer                                    (26)
	Exp2 -> Id                                         (27)
	Exp2 -> '(' Exp ')'                                (28)
	ListStm ->                                         (29)
	ListStm -> Stm ListStm                             (30)
	ListStm ->                                         (31)
	ListStm -> Stm                                     (32)
	ListStm -> Stm ';' ListStm                         (33)
	Type -> 'float'                                    (34)
	Type -> 'int'                                      (35)
	Stm -> Decl                                        (36)
	Stm -> Exp                                         (37)
	Stm -> Block                                       (38)
	Stm -> Id '=' Exp                                  (39)
	Stm -> 'while' '(' Exp ')' Stm                     (40)
	Stm -> 'if' '(' Exp ')' Stm 'else' Stm             (41)
	Block -> '{' ListStm '}'                           (42)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	','            { PT _ (TS _ 5) }
	'-'            { PT _ (TS _ 6) }
	'/'            { PT _ (TS _ 7) }
	':'            { PT _ (TS _ 8) }
	';'            { PT _ (TS _ 9) }
	'='            { PT _ (TS _ 10) }
	'def'          { PT _ (TS _ 11) }
	'else'         { PT _ (TS _ 12) }
	'float'        { PT _ (TS _ 13) }
	'if'           { PT _ (TS _ 14) }
	'int'          { PT _ (TS _ 15) }
	'var'          { PT _ (TS _ 16) }
	'while'        { PT _ (TS _ 17) }
	'{'            { PT _ (TS _ 18) }
	'}'            { PT _ (TS _ 19) }
	L_integ        { PT _ (TI $$) }
	L_Id           { PT _ (T_Id _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Integer         rule  1
	Id              rule  2
	Program         rule  3
	ListDecl        rules 4, 5
	Decl            rules 6, 7, 8
	ListArgs        rules 9, 10, 11, 12
	Args            rule  13
	ListArg         rules 14, 15, 16, 17, 18
	Arg             rule  19
	Exp             rules 20, 21, 22
	Exp1            rules 23, 24, 25
	Exp2            rules 26, 27, 28
	ListStm         rules 29, 30, 31, 32, 33
	Type            rules 34, 35
	Stm             rules 36, 37, 38, 39, 40, 41
	Block           rule  42

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'def'          reduce using rule 4
	'var'          reduce using rule 4
	%eof           reduce using rule 4

	Program        goto state 3
	ListDecl       goto state 4

State 1


	L_integ        shift, and enter state 2


State 2

	Integer -> L_integ .                                (rule 1)

	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'/'            reduce using rule 1
	'def'          reduce using rule 1
	'var'          reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	Program -> ListDecl .                               (rule 3)
	ListDecl -> ListDecl . Decl                         (rule 5)

	'def'          shift, and enter state 6
	'var'          shift, and enter state 7
	%eof           reduce using rule 3

	Decl           goto state 5

State 5

	ListDecl -> ListDecl Decl .                         (rule 5)

	'def'          reduce using rule 5
	'var'          reduce using rule 5
	%eof           reduce using rule 5


State 6

	Decl -> 'def' . Id ListArgs ':' Type '=' Exp        (rule 6)

	L_Id           shift, and enter state 9

	Id             goto state 10

State 7

	Decl -> 'var' . Id ':' Type                         (rule 7)
	Decl -> 'var' . Id ':' Type '=' Exp                 (rule 8)

	L_Id           shift, and enter state 9

	Id             goto state 8

State 8

	Decl -> 'var' Id . ':' Type                         (rule 7)
	Decl -> 'var' Id . ':' Type '=' Exp                 (rule 8)

	':'            shift, and enter state 14


State 9

	Id -> L_Id .                                        (rule 2)

	'('            reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	':'            reduce using rule 2
	'def'          reduce using rule 2
	'var'          reduce using rule 2
	%eof           reduce using rule 2


State 10

	Decl -> 'def' Id . ListArgs ':' Type '=' Exp        (rule 6)

	'('            shift, and enter state 13
	':'            reduce using rule 9

	ListArgs       goto state 11
	Args           goto state 12

State 11

	Decl -> 'def' Id ListArgs . ':' Type '=' Exp        (rule 6)

	':'            shift, and enter state 22


State 12

	ListArgs -> Args . ListArgs                         (rule 10)
	ListArgs -> Args .                                  (rule 11)
	ListArgs -> Args . ListArgs                         (rule 12)

	'('            shift, and enter state 13
	':'            reduce using rule 11
			(reduce using rule 9)


	ListArgs       goto state 21
	Args           goto state 12

State 13

	Args -> '(' . ListArg ')'                           (rule 13)

	')'            reduce using rule 17
			(reduce using rule 14)

	L_Id           shift, and enter state 9

	Id             goto state 18
	ListArg        goto state 19
	Arg            goto state 20

State 14

	Decl -> 'var' Id ':' . Type                         (rule 7)
	Decl -> 'var' Id ':' . Type '=' Exp                 (rule 8)

	'float'        shift, and enter state 16
	'int'          shift, and enter state 17

	Type           goto state 15

State 15

	Decl -> 'var' Id ':' Type .                         (rule 7)
	Decl -> 'var' Id ':' Type . '=' Exp                 (rule 8)

	'='            shift, and enter state 28
	'def'          reduce using rule 7
	'var'          reduce using rule 7
	%eof           reduce using rule 7


State 16

	Type -> 'float' .                                   (rule 34)

	')'            reduce using rule 34
	','            reduce using rule 34
	'='            reduce using rule 34
	'def'          reduce using rule 34
	'var'          reduce using rule 34
	L_Id           reduce using rule 34
	%eof           reduce using rule 34


State 17

	Type -> 'int' .                                     (rule 35)

	')'            reduce using rule 35
	','            reduce using rule 35
	'='            reduce using rule 35
	'def'          reduce using rule 35
	'var'          reduce using rule 35
	L_Id           reduce using rule 35
	%eof           reduce using rule 35


State 18

	Arg -> Id . ':' Type                                (rule 19)

	':'            shift, and enter state 27


State 19

	Args -> '(' ListArg . ')'                           (rule 13)

	')'            shift, and enter state 26


State 20

	ListArg -> Arg .                                    (rule 15)
	ListArg -> Arg . ',' ListArg                        (rule 16)
	ListArg -> Arg . ListArg                            (rule 18)

	')'            reduce using rule 17
			(reduce using rule 15)
			(reduce using rule 14)

	','            shift, and enter state 25
	L_Id           shift, and enter state 9

	Id             goto state 18
	ListArg        goto state 24
	Arg            goto state 20

State 21

	ListArgs -> Args ListArgs .                         (rule 10)
	ListArgs -> Args ListArgs .                         (rule 12)

	':'            reduce using rule 12
			(reduce using rule 10)



State 22

	Decl -> 'def' Id ListArgs ':' . Type '=' Exp        (rule 6)

	'float'        shift, and enter state 16
	'int'          shift, and enter state 17

	Type           goto state 23

State 23

	Decl -> 'def' Id ListArgs ':' Type . '=' Exp        (rule 6)

	'='            shift, and enter state 37


State 24

	ListArg -> Arg ListArg .                            (rule 18)

	')'            reduce using rule 18


State 25

	ListArg -> Arg ',' . ListArg                        (rule 16)

	')'            reduce using rule 17
			(reduce using rule 14)

	L_Id           shift, and enter state 9

	Id             goto state 18
	ListArg        goto state 36
	Arg            goto state 20

State 26

	Args -> '(' ListArg ')' .                           (rule 13)

	'('            reduce using rule 13
	':'            reduce using rule 13


State 27

	Arg -> Id ':' . Type                                (rule 19)

	'float'        shift, and enter state 16
	'int'          shift, and enter state 17

	Type           goto state 35

State 28

	Decl -> 'var' Id ':' Type '=' . Exp                 (rule 8)

	'('            shift, and enter state 34
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 29
	Id             goto state 30
	Exp            goto state 31
	Exp1           goto state 32
	Exp2           goto state 33

State 29

	Exp2 -> Integer .                                   (rule 26)

	')'            reduce using rule 26
	'*'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'/'            reduce using rule 26
	'def'          reduce using rule 26
	'var'          reduce using rule 26
	%eof           reduce using rule 26


State 30

	Exp2 -> Id .                                        (rule 27)

	')'            reduce using rule 27
	'*'            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'/'            reduce using rule 27
	'def'          reduce using rule 27
	'var'          reduce using rule 27
	%eof           reduce using rule 27


State 31

	Decl -> 'var' Id ':' Type '=' Exp .                 (rule 8)
	Exp -> Exp . '+' Exp1                               (rule 20)
	Exp -> Exp . '-' Exp1                               (rule 21)

	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'def'          reduce using rule 8
	'var'          reduce using rule 8
	%eof           reduce using rule 8


State 32

	Exp -> Exp1 .                                       (rule 22)
	Exp1 -> Exp1 . '*' Exp2                             (rule 23)
	Exp1 -> Exp1 . '/' Exp2                             (rule 24)

	')'            reduce using rule 22
	'*'            shift, and enter state 40
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'/'            shift, and enter state 41
	'def'          reduce using rule 22
	'var'          reduce using rule 22
	%eof           reduce using rule 22


State 33

	Exp1 -> Exp2 .                                      (rule 25)

	')'            reduce using rule 25
	'*'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'/'            reduce using rule 25
	'def'          reduce using rule 25
	'var'          reduce using rule 25
	%eof           reduce using rule 25


State 34

	Exp2 -> '(' . Exp ')'                               (rule 28)

	'('            shift, and enter state 34
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 29
	Id             goto state 30
	Exp            goto state 39
	Exp1           goto state 32
	Exp2           goto state 33

State 35

	Arg -> Id ':' Type .                                (rule 19)

	')'            reduce using rule 19
	','            reduce using rule 19
	L_Id           reduce using rule 19


State 36

	ListArg -> Arg ',' ListArg .                        (rule 16)

	')'            reduce using rule 16


State 37

	Decl -> 'def' Id ListArgs ':' Type '=' . Exp        (rule 6)

	'('            shift, and enter state 34
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 29
	Id             goto state 30
	Exp            goto state 38
	Exp1           goto state 32
	Exp2           goto state 33

State 38

	Decl -> 'def' Id ListArgs ':' Type '=' Exp .        (rule 6)
	Exp -> Exp . '+' Exp1                               (rule 20)
	Exp -> Exp . '-' Exp1                               (rule 21)

	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'def'          reduce using rule 6
	'var'          reduce using rule 6
	%eof           reduce using rule 6


State 39

	Exp -> Exp . '+' Exp1                               (rule 20)
	Exp -> Exp . '-' Exp1                               (rule 21)
	Exp2 -> '(' Exp . ')'                               (rule 28)

	')'            shift, and enter state 48
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43


State 40

	Exp1 -> Exp1 '*' . Exp2                             (rule 23)

	'('            shift, and enter state 34
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 29
	Id             goto state 30
	Exp2           goto state 47

State 41

	Exp1 -> Exp1 '/' . Exp2                             (rule 24)

	'('            shift, and enter state 34
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 29
	Id             goto state 30
	Exp2           goto state 46

State 42

	Exp -> Exp '+' . Exp1                               (rule 20)

	'('            shift, and enter state 34
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 29
	Id             goto state 30
	Exp1           goto state 45
	Exp2           goto state 33

State 43

	Exp -> Exp '-' . Exp1                               (rule 21)

	'('            shift, and enter state 34
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 29
	Id             goto state 30
	Exp1           goto state 44
	Exp2           goto state 33

State 44

	Exp -> Exp '-' Exp1 .                               (rule 21)
	Exp1 -> Exp1 . '*' Exp2                             (rule 23)
	Exp1 -> Exp1 . '/' Exp2                             (rule 24)

	')'            reduce using rule 21
	'*'            shift, and enter state 40
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'/'            shift, and enter state 41
	'def'          reduce using rule 21
	'var'          reduce using rule 21
	%eof           reduce using rule 21


State 45

	Exp -> Exp '+' Exp1 .                               (rule 20)
	Exp1 -> Exp1 . '*' Exp2                             (rule 23)
	Exp1 -> Exp1 . '/' Exp2                             (rule 24)

	')'            reduce using rule 20
	'*'            shift, and enter state 40
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'/'            shift, and enter state 41
	'def'          reduce using rule 20
	'var'          reduce using rule 20
	%eof           reduce using rule 20


State 46

	Exp1 -> Exp1 '/' Exp2 .                             (rule 24)

	')'            reduce using rule 24
	'*'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'/'            reduce using rule 24
	'def'          reduce using rule 24
	'var'          reduce using rule 24
	%eof           reduce using rule 24


State 47

	Exp1 -> Exp1 '*' Exp2 .                             (rule 23)

	')'            reduce using rule 23
	'*'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'/'            reduce using rule 23
	'def'          reduce using rule 23
	'var'          reduce using rule 23
	%eof           reduce using rule 23


State 48

	Exp2 -> '(' Exp ')' .                               (rule 28)

	')'            reduce using rule 28
	'*'            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'/'            reduce using rule 28
	'def'          reduce using rule 28
	'var'          reduce using rule 28
	%eof           reduce using rule 28


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 43
Number of terminals: 21
Number of non-terminals: 17
Number of states: 49

-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from ParGramm.y
-----------------------------------------------------------------------------

state 0 contains 1 reduce/reduce conflicts.
state 5 contains 1 reduce/reduce conflicts.
state 12 contains 1 reduce/reduce conflicts.
state 15 contains 1 reduce/reduce conflicts.
state 16 contains 1 reduce/reduce conflicts.
state 24 contains 1 reduce/reduce conflicts.
state 25 contains 1 reduce/reduce conflicts.
state 29 contains 1 reduce/reduce conflicts.

rule 4 is unused
rule 5 is unused
rule 13 is unused
rule 17 is unused
rule 18 is unused
rule 32 is unused
rule 33 is unused
rule 34 is unused
rule 35 is unused
rule 36 is unused
rule 40 is unused
rule 41 is unused
rule 42 is unused
rule 43 is unused
rule 44 is unused
rule 45 is unused
rule 46 is unused

terminal 'else' is unused
terminal 'if' is unused
terminal 'while' is unused
terminal '{' is unused
terminal '}' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Integer -> L_integ                                 (1)
	Id -> L_Id                                         (2)
	Program -> ListDecl                                (3)
	ListDecl ->                                        (4)
	ListDecl -> Decl                                   (5)
	ListDecl -> Decl ';' ListDecl                      (6)
	ListDecl ->                                        (7)
	ListDecl -> Decl ListDecl                          (8)
	Decl -> 'def' Id ListArgs ':' Type '=' Exp         (9)
	Decl -> 'var' Id ':' Type                          (10)
	Decl -> 'var' Id ':' Type '=' Exp                  (11)
	ListArgs ->                                        (12)
	ListArgs -> Args ListArgs                          (13)
	ListArgs -> Args                                   (14)
	ListArgs -> Args ListArgs                          (15)
	Args -> '(' ListArg ')'                            (16)
	ListArg ->                                         (17)
	ListArg -> Arg                                     (18)
	ListArg -> Arg ',' ListArg                         (19)
	ListArg ->                                         (20)
	ListArg -> Arg ListArg                             (21)
	Arg -> Id ':' Type                                 (22)
	Exp -> Exp '+' Exp1                                (23)
	Exp -> Exp '-' Exp1                                (24)
	Exp -> Exp1                                        (25)
	Exp1 -> Exp1 Exp2                                  (26)
	Exp1 -> Exp1 '/' Exp2                              (27)
	Exp1 -> Exp2                                       (28)
	Exp2 -> Integer                                    (29)
	Exp2 -> Id                                         (30)
	Exp2 -> '(' Exp ')'                                (31)
	ListStm ->                                         (32)
	ListStm -> Stm ListStm                             (33)
	ListStm ->                                         (34)
	ListStm -> Stm                                     (35)
	ListStm -> Stm ';' ListStm                         (36)
	Type -> 'float'                                    (37)
	Type -> 'int'                                      (38)
	Type -> 'null'                                     (39)
	Stm -> Decl                                        (40)
	Stm -> Exp                                         (41)
	Stm -> Block                                       (42)
	Stm -> Id '=' Exp                                  (43)
	Stm -> 'while' '(' Exp ')' Stm                     (44)
	Stm -> 'if' '(' Exp ')' Stm 'else' Stm             (45)
	Block -> '{' ListStm '}'                           (46)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'+'            { PT _ (TS _ 3) }
	','            { PT _ (TS _ 4) }
	'-'            { PT _ (TS _ 5) }
	'/'            { PT _ (TS _ 6) }
	':'            { PT _ (TS _ 7) }
	';'            { PT _ (TS _ 8) }
	'='            { PT _ (TS _ 9) }
	'def'          { PT _ (TS _ 10) }
	'else'         { PT _ (TS _ 11) }
	'float'        { PT _ (TS _ 12) }
	'if'           { PT _ (TS _ 13) }
	'int'          { PT _ (TS _ 14) }
	'null'         { PT _ (TS _ 15) }
	'var'          { PT _ (TS _ 16) }
	'while'        { PT _ (TS _ 17) }
	'{'            { PT _ (TS _ 18) }
	'}'            { PT _ (TS _ 19) }
	L_integ        { PT _ (TI $$) }
	L_Id           { PT _ (T_Id _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Integer         rule  1
	Id              rule  2
	Program         rule  3
	ListDecl        rules 4, 5, 6, 7, 8
	Decl            rules 9, 10, 11
	ListArgs        rules 12, 13, 14, 15
	Args            rule  16
	ListArg         rules 17, 18, 19, 20, 21
	Arg             rule  22
	Exp             rules 23, 24, 25
	Exp1            rules 26, 27, 28
	Exp2            rules 29, 30, 31
	ListStm         rules 32, 33, 34, 35, 36
	Type            rules 37, 38, 39
	Stm             rules 40, 41, 42, 43, 44, 45
	Block           rule  46

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'def'          shift, and enter state 6
	'var'          shift, and enter state 7
	%eof           reduce using rule 7
			(reduce using rule 4)


	Program        goto state 3
	ListDecl       goto state 4
	Decl           goto state 5

State 1


	L_integ        shift, and enter state 2


State 2

	Integer -> L_integ .                                (rule 1)

	'('            reduce using rule 1
	')'            reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'/'            reduce using rule 1
	';'            reduce using rule 1
	'def'          reduce using rule 1
	'var'          reduce using rule 1
	L_integ        reduce using rule 1
	L_Id           reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	Program -> ListDecl .                               (rule 3)

	%eof           reduce using rule 3


State 5

	ListDecl -> Decl .                                  (rule 5)
	ListDecl -> Decl . ';' ListDecl                     (rule 6)
	ListDecl -> Decl . ListDecl                         (rule 8)

	';'            shift, and enter state 12
	'def'          shift, and enter state 6
	'var'          shift, and enter state 7
	%eof           reduce using rule 7
			(reduce using rule 5)
			(reduce using rule 4)


	ListDecl       goto state 11
	Decl           goto state 5

State 6

	Decl -> 'def' . Id ListArgs ':' Type '=' Exp        (rule 9)

	L_Id           shift, and enter state 9

	Id             goto state 10

State 7

	Decl -> 'var' . Id ':' Type                         (rule 10)
	Decl -> 'var' . Id ':' Type '=' Exp                 (rule 11)

	L_Id           shift, and enter state 9

	Id             goto state 8

State 8

	Decl -> 'var' Id . ':' Type                         (rule 10)
	Decl -> 'var' Id . ':' Type '=' Exp                 (rule 11)

	':'            shift, and enter state 17


State 9

	Id -> L_Id .                                        (rule 2)

	'('            reduce using rule 2
	')'            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	':'            reduce using rule 2
	';'            reduce using rule 2
	'def'          reduce using rule 2
	'var'          reduce using rule 2
	L_integ        reduce using rule 2
	L_Id           reduce using rule 2
	%eof           reduce using rule 2


State 10

	Decl -> 'def' Id . ListArgs ':' Type '=' Exp        (rule 9)

	'('            shift, and enter state 16
	':'            reduce using rule 12

	ListArgs       goto state 14
	Args           goto state 15

State 11

	ListDecl -> Decl ListDecl .                         (rule 8)

	%eof           reduce using rule 8


State 12

	ListDecl -> Decl ';' . ListDecl                     (rule 6)

	'def'          shift, and enter state 6
	'var'          shift, and enter state 7
	%eof           reduce using rule 7
			(reduce using rule 4)


	ListDecl       goto state 13
	Decl           goto state 5

State 13

	ListDecl -> Decl ';' ListDecl .                     (rule 6)

	%eof           reduce using rule 6


State 14

	Decl -> 'def' Id ListArgs . ':' Type '=' Exp        (rule 9)

	':'            shift, and enter state 26


State 15

	ListArgs -> Args . ListArgs                         (rule 13)
	ListArgs -> Args .                                  (rule 14)
	ListArgs -> Args . ListArgs                         (rule 15)

	'('            shift, and enter state 16
	':'            reduce using rule 14
			(reduce using rule 12)


	ListArgs       goto state 25
	Args           goto state 15

State 16

	Args -> '(' . ListArg ')'                           (rule 16)

	')'            reduce using rule 20
			(reduce using rule 17)

	L_Id           shift, and enter state 9

	Id             goto state 22
	ListArg        goto state 23
	Arg            goto state 24

State 17

	Decl -> 'var' Id ':' . Type                         (rule 10)
	Decl -> 'var' Id ':' . Type '=' Exp                 (rule 11)

	'float'        shift, and enter state 19
	'int'          shift, and enter state 20
	'null'         shift, and enter state 21

	Type           goto state 18

State 18

	Decl -> 'var' Id ':' Type .                         (rule 10)
	Decl -> 'var' Id ':' Type . '=' Exp                 (rule 11)

	';'            reduce using rule 10
	'='            shift, and enter state 32
	'def'          reduce using rule 10
	'var'          reduce using rule 10
	%eof           reduce using rule 10


State 19

	Type -> 'float' .                                   (rule 37)

	')'            reduce using rule 37
	','            reduce using rule 37
	';'            reduce using rule 37
	'='            reduce using rule 37
	'def'          reduce using rule 37
	'var'          reduce using rule 37
	L_Id           reduce using rule 37
	%eof           reduce using rule 37


State 20

	Type -> 'int' .                                     (rule 38)

	')'            reduce using rule 38
	','            reduce using rule 38
	';'            reduce using rule 38
	'='            reduce using rule 38
	'def'          reduce using rule 38
	'var'          reduce using rule 38
	L_Id           reduce using rule 38
	%eof           reduce using rule 38


State 21

	Type -> 'null' .                                    (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39
	'='            reduce using rule 39
	'def'          reduce using rule 39
	'var'          reduce using rule 39
	L_Id           reduce using rule 39
	%eof           reduce using rule 39


State 22

	Arg -> Id . ':' Type                                (rule 22)

	':'            shift, and enter state 31


State 23

	Args -> '(' ListArg . ')'                           (rule 16)

	')'            shift, and enter state 30


State 24

	ListArg -> Arg .                                    (rule 18)
	ListArg -> Arg . ',' ListArg                        (rule 19)
	ListArg -> Arg . ListArg                            (rule 21)

	')'            reduce using rule 20
			(reduce using rule 18)
			(reduce using rule 17)

	','            shift, and enter state 29
	L_Id           shift, and enter state 9

	Id             goto state 22
	ListArg        goto state 28
	Arg            goto state 24

State 25

	ListArgs -> Args ListArgs .                         (rule 13)
	ListArgs -> Args ListArgs .                         (rule 15)

	':'            reduce using rule 15
			(reduce using rule 13)



State 26

	Decl -> 'def' Id ListArgs ':' . Type '=' Exp        (rule 9)

	'float'        shift, and enter state 19
	'int'          shift, and enter state 20
	'null'         shift, and enter state 21

	Type           goto state 27

State 27

	Decl -> 'def' Id ListArgs ':' Type . '=' Exp        (rule 9)

	'='            shift, and enter state 41


State 28

	ListArg -> Arg ListArg .                            (rule 21)

	')'            reduce using rule 21


State 29

	ListArg -> Arg ',' . ListArg                        (rule 19)

	')'            reduce using rule 20
			(reduce using rule 17)

	L_Id           shift, and enter state 9

	Id             goto state 22
	ListArg        goto state 40
	Arg            goto state 24

State 30

	Args -> '(' ListArg ')' .                           (rule 16)

	'('            reduce using rule 16
	':'            reduce using rule 16


State 31

	Arg -> Id ':' . Type                                (rule 22)

	'float'        shift, and enter state 19
	'int'          shift, and enter state 20
	'null'         shift, and enter state 21

	Type           goto state 39

State 32

	Decl -> 'var' Id ':' Type '=' . Exp                 (rule 11)

	'('            shift, and enter state 38
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 33
	Id             goto state 34
	Exp            goto state 35
	Exp1           goto state 36
	Exp2           goto state 37

State 33

	Exp2 -> Integer .                                   (rule 29)

	'('            reduce using rule 29
	')'            reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'/'            reduce using rule 29
	';'            reduce using rule 29
	'def'          reduce using rule 29
	'var'          reduce using rule 29
	L_integ        reduce using rule 29
	L_Id           reduce using rule 29
	%eof           reduce using rule 29


State 34

	Exp2 -> Id .                                        (rule 30)

	'('            reduce using rule 30
	')'            reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'/'            reduce using rule 30
	';'            reduce using rule 30
	'def'          reduce using rule 30
	'var'          reduce using rule 30
	L_integ        reduce using rule 30
	L_Id           reduce using rule 30
	%eof           reduce using rule 30


State 35

	Decl -> 'var' Id ':' Type '=' Exp .                 (rule 11)
	Exp -> Exp . '+' Exp1                               (rule 23)
	Exp -> Exp . '-' Exp1                               (rule 24)

	'+'            shift, and enter state 46
	'-'            shift, and enter state 47
	';'            reduce using rule 11
	'def'          reduce using rule 11
	'var'          reduce using rule 11
	%eof           reduce using rule 11


State 36

	Exp -> Exp1 .                                       (rule 25)
	Exp1 -> Exp1 . Exp2                                 (rule 26)
	Exp1 -> Exp1 . '/' Exp2                             (rule 27)

	'('            shift, and enter state 38
	')'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'/'            shift, and enter state 45
	';'            reduce using rule 25
	'def'          reduce using rule 25
	'var'          reduce using rule 25
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9
	%eof           reduce using rule 25

	Integer        goto state 33
	Id             goto state 34
	Exp2           goto state 44

State 37

	Exp1 -> Exp2 .                                      (rule 28)

	'('            reduce using rule 28
	')'            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'/'            reduce using rule 28
	';'            reduce using rule 28
	'def'          reduce using rule 28
	'var'          reduce using rule 28
	L_integ        reduce using rule 28
	L_Id           reduce using rule 28
	%eof           reduce using rule 28


State 38

	Exp2 -> '(' . Exp ')'                               (rule 31)

	'('            shift, and enter state 38
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 33
	Id             goto state 34
	Exp            goto state 43
	Exp1           goto state 36
	Exp2           goto state 37

State 39

	Arg -> Id ':' Type .                                (rule 22)

	')'            reduce using rule 22
	','            reduce using rule 22
	L_Id           reduce using rule 22


State 40

	ListArg -> Arg ',' ListArg .                        (rule 19)

	')'            reduce using rule 19


State 41

	Decl -> 'def' Id ListArgs ':' Type '=' . Exp        (rule 9)

	'('            shift, and enter state 38
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 33
	Id             goto state 34
	Exp            goto state 42
	Exp1           goto state 36
	Exp2           goto state 37

State 42

	Decl -> 'def' Id ListArgs ':' Type '=' Exp .        (rule 9)
	Exp -> Exp . '+' Exp1                               (rule 23)
	Exp -> Exp . '-' Exp1                               (rule 24)

	'+'            shift, and enter state 46
	'-'            shift, and enter state 47
	';'            reduce using rule 9
	'def'          reduce using rule 9
	'var'          reduce using rule 9
	%eof           reduce using rule 9


State 43

	Exp -> Exp . '+' Exp1                               (rule 23)
	Exp -> Exp . '-' Exp1                               (rule 24)
	Exp2 -> '(' Exp . ')'                               (rule 31)

	')'            shift, and enter state 51
	'+'            shift, and enter state 46
	'-'            shift, and enter state 47


State 44

	Exp1 -> Exp1 Exp2 .                                 (rule 26)

	'('            reduce using rule 26
	')'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'/'            reduce using rule 26
	';'            reduce using rule 26
	'def'          reduce using rule 26
	'var'          reduce using rule 26
	L_integ        reduce using rule 26
	L_Id           reduce using rule 26
	%eof           reduce using rule 26


State 45

	Exp1 -> Exp1 '/' . Exp2                             (rule 27)

	'('            shift, and enter state 38
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 33
	Id             goto state 34
	Exp2           goto state 50

State 46

	Exp -> Exp '+' . Exp1                               (rule 23)

	'('            shift, and enter state 38
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 33
	Id             goto state 34
	Exp1           goto state 49
	Exp2           goto state 37

State 47

	Exp -> Exp '-' . Exp1                               (rule 24)

	'('            shift, and enter state 38
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9

	Integer        goto state 33
	Id             goto state 34
	Exp1           goto state 48
	Exp2           goto state 37

State 48

	Exp -> Exp '-' Exp1 .                               (rule 24)
	Exp1 -> Exp1 . Exp2                                 (rule 26)
	Exp1 -> Exp1 . '/' Exp2                             (rule 27)

	'('            shift, and enter state 38
	')'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'/'            shift, and enter state 45
	';'            reduce using rule 24
	'def'          reduce using rule 24
	'var'          reduce using rule 24
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9
	%eof           reduce using rule 24

	Integer        goto state 33
	Id             goto state 34
	Exp2           goto state 44

State 49

	Exp -> Exp '+' Exp1 .                               (rule 23)
	Exp1 -> Exp1 . Exp2                                 (rule 26)
	Exp1 -> Exp1 . '/' Exp2                             (rule 27)

	'('            shift, and enter state 38
	')'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'/'            shift, and enter state 45
	';'            reduce using rule 23
	'def'          reduce using rule 23
	'var'          reduce using rule 23
	L_integ        shift, and enter state 2
	L_Id           shift, and enter state 9
	%eof           reduce using rule 23

	Integer        goto state 33
	Id             goto state 34
	Exp2           goto state 44

State 50

	Exp1 -> Exp1 '/' Exp2 .                             (rule 27)

	'('            reduce using rule 27
	')'            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'/'            reduce using rule 27
	';'            reduce using rule 27
	'def'          reduce using rule 27
	'var'          reduce using rule 27
	L_integ        reduce using rule 27
	L_Id           reduce using rule 27
	%eof           reduce using rule 27


State 51

	Exp2 -> '(' Exp ')' .                               (rule 31)

	'('            reduce using rule 31
	')'            reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'/'            reduce using rule 31
	';'            reduce using rule 31
	'def'          reduce using rule 31
	'var'          reduce using rule 31
	L_integ        reduce using rule 31
	L_Id           reduce using rule 31
	%eof           reduce using rule 31


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 47
Number of terminals: 21
Number of non-terminals: 17
Number of states: 52

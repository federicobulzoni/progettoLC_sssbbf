-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsGramm where

newtype PTrue = PTrue ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PFalse = PFalse ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PReturn = PReturn ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PNull = PNull ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PIdent = PIdent ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PFloat = PFloat ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PInteger = PInteger ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PString = PString ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PChar = PChar ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

data Program = Prog [Declaration]
  deriving (Eq, Ord, Show, Read)

data TypeSpec
    = TSimple SType | TPointer TypeSpec | TArray TypeSpec Exp
  deriving (Eq, Ord, Show, Read)

data SType
    = SType_Float
    | SType_Int
    | SType_Char
    | SType_String
    | SType_Bool
    | TypeError
    | TypeVoid
  deriving (Eq, Ord, Show, Read)

data Declaration
    = DecVar PIdent TypeSpec
    | DefVar PIdent TypeSpec Exp
    | DefFun PIdent [ParamClause] TypeSpec Block
    | DefFunInLine PIdent [ParamClause] TypeSpec Exp
  deriving (Eq, Ord, Show, Read)

data ParamClause = PArg [Arg]
  deriving (Eq, Ord, Show, Read)

data Block = DBlock [Stm] | BlockTyped Block TypeSpec
  deriving (Eq, Ord, Show, Read)

data Arg = DArg PIdent TypeSpec
  deriving (Eq, Ord, Show, Read)

data Op
    = Or
    | And
    | Less
    | LessEq
    | Greater
    | GreaterEq
    | Equal
    | NotEq
    | Plus
    | Minus
    | Prod
    | Div
    | Mod
    | Pow
  deriving (Eq, Ord, Show, Read)

data Exp
    = EArray [Exp]
    | EFunCall PIdent [Params]
    | ENot Exp
    | ENeg Exp
    | ELExp LExp
    | EDeref LExp
    | EInt PInteger
    | EFloat PFloat
    | EChar PChar
    | EString PString
    | ETrue PTrue
    | EFalse PFalse
    | ENull PNull
    | EOp Exp Op Exp
    | ETyped Exp TypeSpec Integer Integer
  deriving (Eq, Ord, Show, Read)

data TExp
  = Typed Exp TypeSpec Integer Integer
  | Typed Stm ...
  | Typed Block ...

data Typizable
  = Exp
  | Stm
  | Block


data Params = ParExp [Exp]
  deriving (Eq, Ord, Show, Read)

data Stm
    = SDecl Declaration
    | SBlock Block
    | SAssign LExp Exp
    | SWhile Exp Stm
    | SIf Exp Stm Stm
    | SReturn PReturn
    | SReturnExp PReturn Exp
    | StmTyped Stm TypeSpec
  deriving (Eq, Ord, Show, Read)

data LExp
    = LRef LExp
    | LArr LExp Exp
    | LIdent PIdent
    | LExpTyped LExp TypeSpec Integer Integer
    | LIdentTyped PIdent TypeSpec Integer Integer
  deriving (Eq, Ord, Show, Read)


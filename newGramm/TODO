Cose da fare:
	[X] mettere tipi tac                     SB
    [X] sistemare layout stampa tac          SB/SS
    [X] sistemare errori in file separato   SS
    [X] se c'è una funzione "main" top level va messa all'inizio del tac.
    [X] se l'istruzione precedente è un return, non aggiungere il return alla fine della funzione.
    [X] le dichiarazioni delle variabili globali vanno in testa al tac
    [X] Distinguere stampa errori e warning
    [X] modificare ordine delle funzioni quando si trova un main (che ora va in testa al tac, dopo le dichiarazioni di variabile) ma le sue funzioni interne rimangono nell'ordine sbagliato
    [] guardare todo in typechecker         SS/SB/BF
    [] fate tanti test                      BF    
    [] pulizia codice                       SS/BF   
    [] Aggiungere: *= -= += /= %= 
    [] una funzione può anche essere dichiarata senza parentesi in Scala
                            def foo : Int = {
                                1
                            }
    [] le dichiarazioni in linea di funzioni riguardano solo le funzioni e non lo procedure per come è fatto ora,
    il significato di una definizione il linea di funzione è quello di avere una funzione con una unica istruzione
    return exp. Per come è fatto ora non è possibile fare "wrap" di procedure.
    [X] Aggiungere nella grammatica un ; alla fine delle dichiarazioni di funzione inline.
    [] Aggiungere commenti al TAC, per far capire che sappiamo quali sono gli argomenti di una funzione.s
    [] Type Error e Type Void sono brutti scritti in modo diverso dagli altri tipi base. @critical 
    [] Finire di commentare le funzioni in environment.
    [] Controllare se tutti gli import in TestGramm.hs servono veramente.
    [X] Aggiungere statement vuoto per evitare brutture nell-if nel tac.
    [X] Controllare se genLExp per gli array array è giusto. Non sembra, l'indice dovrebbe essere convertito.
    [] Riga 289 del tac. Si pu; lanciare l'errore?
    [] Togliere dipendenze da Typed in Errors
    [] Aggiungere warning se manca il main
    [] Aggiungere un'etichetta in fondo al tac (raggiungibile con goto dopo le decl globali), se manca il main
    [] Todo del typechecker:
  		[] fare in  modo che agli array si possano assegnare Array() di cardinalità minore rispetto a quella dell'array
  		[X] controllare la grammatica e aggiungere le locazioni a tutti i typed che non ce l'hanno.
  		[X] controllare che la locazione negli statement serva veramente (sembra servire solo nella chiamata di funzione)
  		[X] ci serve la posizione di dichiarazione di tutto ciò che viene dichiarato (identificatori: var, fun) --> serve nel tac per identificare gli id
  		[X] l'unica cosa che necessita della locazione sono le espressioni --> stampa errori
  		[X] starting env brutto da vedere.
  		[] errore duplicate variable e duplicate function da mettere a posto.

Cose da aggiungere consegna finale:
    [] continue
    [] switch
    [] conversione tipi
    [] pensare alla compatibilita String + String
    [] Aggiungere: operatore ternario
    [] costanti

Errori da risolvere:

Cose da discutere:
    [X] il TypeChecker da errore se non trova un return nelle funzioni (anche se c'è un return in un if), è corretto? es. test2.scala
        probabilmente non è un problema
        Secondo me va bene così com'è con il warning, avvisa che non c'è un return in tutti i percorsi e questo potrebbe essere non voluto. Sara.
   
       Io lo farei. Sara.
    [X] AbsGramm dovrebbe contenere sono la sintassi astratta, quindi i vari data e type, non la classe typed con relative implementazioni delle funzioni nelle istanze. Vanno da qualche altra parte.
    [] Perché l'abbiamo chiamato Gramm? Tutti i file non dovrebbero avere un nome più significativo, tipo il nome del nostro linguaggio?
    [X] Il commento all'inizio di environment?
    [X] Rimuovere il file TestGramm

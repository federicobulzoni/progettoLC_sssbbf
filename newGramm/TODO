Cose da fare:
	[X] mettere tipi tac                     SB
    [X] sistemare layout stampa tac          SB/SS
    [X] sistemare errori in file separato   SS
    [X] se c'è una funzione "main" top level va messa all'inizio del tac.
    [X] se l'istruzione precedente è un return, non aggiungere il return alla fine della funzione.
    [X] le dichiarazioni delle variabili globali vanno in testa al tac
    [X] Distinguere stampa errori e warning
    [X] modificare ordine delle funzioni quando si trova un main (che ora va in testa al tac, dopo le dichiarazioni di variabile) ma le sue funzioni interne rimangono nell'ordine sbagliato
    [] gestire la stampa dell'albero annotato @critical
    [X] all'interno del TAC va gestito il caso in EArray di un array vuoto. 
    [] decidere cosa assegnare all'array vuoto. Provvisoriamente gli viene assegnato Null @critical
    [] sistemare errori SB
    [X] togliere dipendenze da Typed in Errors. SS
    [] fare tanti test                      BF    
    [] pulizia codice                       SS/BF   
    [X] Aggiungere: *= -= += /= %=           SS
    [] una funzione può anche essere dichiarata senza parentesi in Scala     SB
                            def foo : Int = {
                                1
                            }
    [X] Aggiungere nella grammatica un ; alla fine delle dichiarazioni di funzione inline.
    [] Aggiungere commenti al TAC, per far capire che sappiamo quali sono gli argomenti di una funzione. SB
    [X] Type Error e Type Void sono brutti scritti in modo diverso dagli altri tipi base. SS
    [X] Finire di commentare le funzioni in environment. BF
    [X] Controllare se tutti gli import in TestGramm.hs servono veramente. BF
    [X] Aggiungere statement vuoto per evitare brutture nell-if nel tac.
    [X] Controllare se genLExp per gli array array è giusto. Non sembra, l'indice dovrebbe essere convertito.
    [X] Riga 289 del tac. Si pu; lanciare l'errore? Si
    [X] Aggiungere gestione del main nel TypeChecker. BF
    [X] Aggiungere un'etichetta in fondo al tac (raggiungibile con goto dopo le decl globali), se manca il main      SS
    [] Todo del typechecker: BF
  		[] fare in  modo che agli array si possano assegnare Array() di cardinalità minore rispetto a quella dell'array
            Si vanno a creare problemi a livello di generazione del TAC, per l'assegnamento dei valori mancanti, se la dimensione dell'array assegnato è più piccola della dimensione dell'array che si sta inizializzando.
  		[X] controllare la grammatica e aggiungere le locazioni a tutti i typed che non ce l'hanno.
  		[X] controllare che la locazione negli statement serva veramente (sembra servire solo nella chiamata di funzione)
  		[X] ci serve la posizione di dichiarazione di tutto ciò che viene dichiarato (identificatori: var, fun) --> serve nel tac per identificare gli id
  		[X] l'unica cosa che necessita della locazione sono le espressioni --> stampa errori
  		[X] starting env brutto da vedere.

Cose da aggiungere consegna finale:
    [] continue
    [] switch
    [] conversione tipi
    [] pensare alla compatibilita String + String
    [] Aggiungere: operatore ternario
    [] costanti

Errori da risolvere:

Cose da discutere:
    [X] il TypeChecker da errore se non trova un return nelle funzioni (anche se c'è un return in un if), è corretto? es. test2.scala
        probabilmente non è un problema
        Secondo me va bene così com'è con il warning, avvisa che non c'è un return in tutti i percorsi e questo potrebbe essere non voluto. Sara.
   
       Io lo farei. Sara.
    [X] AbsGramm dovrebbe contenere sono la sintassi astratta, quindi i vari data e type, non la classe typed con relative implementazioni delle funzioni nelle istanze. Vanno da qualche altra parte.
    [] Perché l'abbiamo chiamato Gramm? Tutti i file non dovrebbero avere un nome più significativo, tipo il nome del nostro linguaggio?
    [X] Il commento all'inizio di environment?
    [X] Rimuovere il file TestGramm
    [] quando assegno ad un array di dimensione n una lista di valori di dimensione m, con n > m, è come se gli assegnassi tutti e n i valori e quelli che mancano
        sarebbero valori di default.

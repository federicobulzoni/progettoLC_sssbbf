-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import Control.Monad (when)

import LexGramm
import ParGramm
import SkelGramm
import PrintGramm
import AbsGramm
import AbsTAC
import ThreeAddressCode
import TypeChecker
import Control.Monad.Writer
import PrintTAC

import ErrM

type ParseFun a = [Token] -> Err Program

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run :: Verbosity -> ParseFun Program -> String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
                          exitFailure
           Ok  tree -> do putStrLn "\nParse Successful!"
                          showTree v tree
                          let (annotatedTree, logs) = runWriter $ typeCheck $ tree
                          case (logs) of
                            [] -> do
                              printTypeCheckSuccess annotatedTree
                              let code = genTAC annotatedTree
                              showTAC code
                              {-putStrLn "\n[TAC]\n\n"
                              printTAC2 code-}
                            _ -> do
                              putStrLn "\n[Lista errori type checker]\n\n"
                              printTypeCheckErrors logs 0   
                              printTypeCheckSuccess annotatedTree
                          exitSuccess

printTypeCheckErrors :: [String] -> Int -> IO()
printTypeCheckErrors [] index = putStrLn ""
printTypeCheckErrors (log:logs) index = do
  putStrLn $ show index ++ ") " ++ log
  printTypeCheckErrors logs (index+1)

printTypeCheckSuccess :: Program -> IO()
printTypeCheckSuccess prog = do
  putStrLn "\n[Albero tipato]\n\n"
  putStrV 2 $ show prog

{-
printTAC :: [TAC] -> IO()
printTAC [] = putStrLn ""
printTAC (c:code) = do
  putStrLn $ show c 
  printTAC code
-}

separator :: String
separator = "----------------------------------------------------------------"

showTAC :: [TAC] -> IO ()
showTAC code = do
  putStrLn $ "\n" ++ separator
  putStrLn "[Three Address Code]"
  putStrLn separator
  printTAC code
  putStrLn $ separator ++ "\n"

showTree :: Int -> Program -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> getContents >>= run 2 pProgram
    "-s":fs -> mapM_ (runFile 0 pProgram) fs
    fs -> mapM_ (runFile 2 pProgram) fs






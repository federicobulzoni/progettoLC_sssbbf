{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintGramm.
--   Generated by the BNF converter.

module PrintGramm where

import qualified AbsGramm
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsGramm.Id where
  prt _ (AbsGramm.Id (_,i)) = doc (showString i)

instance Print AbsGramm.Program where
  prt i e = case e of
    AbsGramm.Prog decls -> prPrec i 0 (concatD [prt 0 decls])

instance Print [AbsGramm.Decl] where
  prt = prtList

instance Print AbsGramm.Decl where
  prt i e = case e of
    AbsGramm.DFunInLine id argss type_ exp -> prPrec i 0 (concatD [doc (showString "def"), prt 0 id, prt 0 argss, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 exp])
    AbsGramm.DFunBlock id argss type_ block -> prPrec i 0 (concatD [doc (showString "def"), prt 0 id, prt 0 argss, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 block])
    AbsGramm.DecVar id type_ -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id, doc (showString ":"), prt 0 type_])
    AbsGramm.DefVar id type_ exp -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 exp])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsGramm.Args] where
  prt = prtList

instance Print AbsGramm.Args where
  prt i e = case e of
    AbsGramm.DArgs args -> prPrec i 0 (concatD [doc (showString "("), prt 0 args, doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsGramm.Arg] where
  prt = prtList

instance Print AbsGramm.Arg where
  prt i e = case e of
    AbsGramm.DArg id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
  prtList _ [] = concatD []
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsGramm.Exp where
  prt i e = case e of
    AbsGramm.EAdd exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "+"), prt 1 exp2])
    AbsGramm.ESub exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "-"), prt 1 exp2])
    AbsGramm.EMul exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "*"), prt 2 exp2])
    AbsGramm.EDiv exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "/"), prt 2 exp2])
    AbsGramm.EInt n -> prPrec i 2 (concatD [prt 0 n])
    AbsGramm.EVar id -> prPrec i 2 (concatD [prt 0 id])

instance Print [AbsGramm.Stm] where
  prt = prtList

instance Print AbsGramm.Type where
  prt i e = case e of
    AbsGramm.Type_float -> prPrec i 0 (concatD [doc (showString "float")])
    AbsGramm.Type_int -> prPrec i 0 (concatD [doc (showString "int")])

instance Print AbsGramm.Stm where
  prt i e = case e of
    AbsGramm.Decla decl -> prPrec i 0 (concatD [prt 0 decl])
    AbsGramm.Expr exp -> prPrec i 0 (concatD [prt 0 exp])
    AbsGramm.SBlock block -> prPrec i 0 (concatD [prt 0 block])
    AbsGramm.Assign id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 exp])
    AbsGramm.While exp stm -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])
    AbsGramm.If exp stm1 stm2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm1, doc (showString "else"), prt 0 stm2])
  prtList _ [] = concatD []
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print AbsGramm.Block where
  prt i e = case e of
    AbsGramm.DBlock stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])


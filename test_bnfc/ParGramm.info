-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from ParGramm.y
-----------------------------------------------------------------------------

state 0 contains 1 reduce/reduce conflicts.
state 11 contains 2 reduce/reduce conflicts.
state 18 contains 1 reduce/reduce conflicts.
state 27 contains 2 reduce/reduce conflicts.

rule 13 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Integer -> L_integ                                 (1)
	Ident -> L_ident                                   (2)
	Program -> ListStm                                 (3)
	Exp -> Exp '+' Exp1                                (4)
	Exp -> Exp '-' Exp1                                (5)
	Exp -> Exp1                                        (6)
	Exp1 -> Exp1 '*' Exp2                              (7)
	Exp1 -> Exp1 '/' Exp2                              (8)
	Exp1 -> Exp2                                       (9)
	Exp2 -> Integer                                    (10)
	Exp2 -> Ident                                      (11)
	Exp2 -> '(' Exp ')'                                (12)
	ListStm ->                                         (13)
	ListStm -> Stm ListStm                             (14)
	ListStm ->                                         (15)
	ListStm -> Stm                                     (16)
	ListStm -> Stm ';' ListStm                         (17)
	Type -> 'float'                                    (18)
	Type -> 'int'                                      (19)
	Stm -> Exp                                         (20)
	Stm -> Type Ident '=' Exp                          (21)
	Stm -> Type Ident                                  (22)
	Stm -> Ident '=' Exp                               (23)
	Stm -> '{' ListStm '}'                             (24)
	Stm -> 'while' '(' Exp ')' Stm                     (25)
	Stm -> 'if' '(' Exp ')' Stm 'else' Stm             (26)
	Stm -> 'if' '(' Exp ')' Stm 'endif'                (27)
	Stm -> 'for' '(' Stm ';' Exp ';' Stm ')' Stm       (28)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	'-'            { PT _ (TS _ 5) }
	'/'            { PT _ (TS _ 6) }
	';'            { PT _ (TS _ 7) }
	'='            { PT _ (TS _ 8) }
	'else'         { PT _ (TS _ 9) }
	'endif'        { PT _ (TS _ 10) }
	'float'        { PT _ (TS _ 11) }
	'for'          { PT _ (TS _ 12) }
	'if'           { PT _ (TS _ 13) }
	'int'          { PT _ (TS _ 14) }
	'while'        { PT _ (TS _ 15) }
	'{'            { PT _ (TS _ 16) }
	'}'            { PT _ (TS _ 17) }
	L_integ        { PT _ (TI $$) }
	L_ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Integer         rule  1
	Ident           rule  2
	Program         rule  3
	Exp             rules 4, 5, 6
	Exp1            rules 7, 8, 9
	Exp2            rules 10, 11, 12
	ListStm         rules 13, 14, 15, 16, 17
	Type            rules 18, 19
	Stm             rules 20, 21, 22, 23, 24, 25, 26, 27, 28

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 12
	'float'        shift, and enter state 13
	'for'          shift, and enter state 14
	'if'           shift, and enter state 15
	'int'          shift, and enter state 16
	'while'        shift, and enter state 17
	'{'            shift, and enter state 18
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19
	%eof           reduce using rule 15
			(reduce using rule 13)


	Integer        goto state 3
	Ident          goto state 4
	Program        goto state 5
	Exp            goto state 6
	Exp1           goto state 7
	Exp2           goto state 8
	ListStm        goto state 9
	Type           goto state 10
	Stm            goto state 11

State 1


	L_integ        shift, and enter state 2


State 2

	Integer -> L_integ .                                (rule 1)

	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'/'            reduce using rule 1
	';'            reduce using rule 1
	'else'         reduce using rule 1
	'endif'        reduce using rule 1
	'float'        reduce using rule 1
	'for'          reduce using rule 1
	'if'           reduce using rule 1
	'int'          reduce using rule 1
	'while'        reduce using rule 1
	'{'            reduce using rule 1
	'}'            reduce using rule 1
	L_integ        reduce using rule 1
	L_ident        reduce using rule 1
	%eof           reduce using rule 1


State 3

	Exp2 -> Integer .                                   (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'/'            reduce using rule 10
	';'            reduce using rule 10
	'else'         reduce using rule 10
	'endif'        reduce using rule 10
	'float'        reduce using rule 10
	'for'          reduce using rule 10
	'if'           reduce using rule 10
	'int'          reduce using rule 10
	'while'        reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	L_integ        reduce using rule 10
	L_ident        reduce using rule 10
	%eof           reduce using rule 10


State 4

	Exp2 -> Ident .                                     (rule 11)
	Stm -> Ident . '=' Exp                              (rule 23)

	'('            reduce using rule 11
	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'/'            reduce using rule 11
	';'            reduce using rule 11
	'='            shift, and enter state 33
	'else'         reduce using rule 11
	'endif'        reduce using rule 11
	'float'        reduce using rule 11
	'for'          reduce using rule 11
	'if'           reduce using rule 11
	'int'          reduce using rule 11
	'while'        reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	L_integ        reduce using rule 11
	L_ident        reduce using rule 11
	%eof           reduce using rule 11


State 5

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 6

	Exp -> Exp . '+' Exp1                               (rule 4)
	Exp -> Exp . '-' Exp1                               (rule 5)
	Stm -> Exp .                                        (rule 20)

	'('            reduce using rule 20
	')'            reduce using rule 20
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	';'            reduce using rule 20
	'else'         reduce using rule 20
	'endif'        reduce using rule 20
	'float'        reduce using rule 20
	'for'          reduce using rule 20
	'if'           reduce using rule 20
	'int'          reduce using rule 20
	'while'        reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	L_integ        reduce using rule 20
	L_ident        reduce using rule 20
	%eof           reduce using rule 20


State 7

	Exp -> Exp1 .                                       (rule 6)
	Exp1 -> Exp1 . '*' Exp2                             (rule 7)
	Exp1 -> Exp1 . '/' Exp2                             (rule 8)

	'('            reduce using rule 6
	')'            reduce using rule 6
	'*'            shift, and enter state 29
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'/'            shift, and enter state 30
	';'            reduce using rule 6
	'else'         reduce using rule 6
	'endif'        reduce using rule 6
	'float'        reduce using rule 6
	'for'          reduce using rule 6
	'if'           reduce using rule 6
	'int'          reduce using rule 6
	'while'        reduce using rule 6
	'{'            reduce using rule 6
	'}'            reduce using rule 6
	L_integ        reduce using rule 6
	L_ident        reduce using rule 6
	%eof           reduce using rule 6


State 8

	Exp1 -> Exp2 .                                      (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	'*'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'/'            reduce using rule 9
	';'            reduce using rule 9
	'else'         reduce using rule 9
	'endif'        reduce using rule 9
	'float'        reduce using rule 9
	'for'          reduce using rule 9
	'if'           reduce using rule 9
	'int'          reduce using rule 9
	'while'        reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	L_integ        reduce using rule 9
	L_ident        reduce using rule 9
	%eof           reduce using rule 9


State 9

	Program -> ListStm .                                (rule 3)

	%eof           reduce using rule 3


State 10

	Stm -> Type . Ident '=' Exp                         (rule 21)
	Stm -> Type . Ident                                 (rule 22)

	L_ident        shift, and enter state 19

	Ident          goto state 28

State 11

	ListStm -> Stm . ListStm                            (rule 14)
	ListStm -> Stm .                                    (rule 16)
	ListStm -> Stm . ';' ListStm                        (rule 17)

	'('            shift, and enter state 12
	';'            shift, and enter state 27
	'float'        shift, and enter state 13
	'for'          shift, and enter state 14
	'if'           shift, and enter state 15
	'int'          shift, and enter state 16
	'while'        shift, and enter state 17
	'{'            shift, and enter state 18
	'}'            reduce using rule 16
			(reduce using rule 15)
			(reduce using rule 13)

	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19
	%eof           reduce using rule 16
			(reduce using rule 15)
			(reduce using rule 13)


	Integer        goto state 3
	Ident          goto state 4
	Exp            goto state 6
	Exp1           goto state 7
	Exp2           goto state 8
	ListStm        goto state 26
	Type           goto state 10
	Stm            goto state 11

State 12

	Exp2 -> '(' . Exp ')'                               (rule 12)

	'('            shift, and enter state 12
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 24
	Exp            goto state 25
	Exp1           goto state 7
	Exp2           goto state 8

State 13

	Type -> 'float' .                                   (rule 18)

	L_ident        reduce using rule 18


State 14

	Stm -> 'for' . '(' Stm ';' Exp ';' Stm ')' Stm      (rule 28)

	'('            shift, and enter state 23


State 15

	Stm -> 'if' . '(' Exp ')' Stm 'else' Stm            (rule 26)
	Stm -> 'if' . '(' Exp ')' Stm 'endif'               (rule 27)

	'('            shift, and enter state 22


State 16

	Type -> 'int' .                                     (rule 19)

	L_ident        reduce using rule 19


State 17

	Stm -> 'while' . '(' Exp ')' Stm                    (rule 25)

	'('            shift, and enter state 21


State 18

	Stm -> '{' . ListStm '}'                            (rule 24)

	'('            shift, and enter state 12
	'float'        shift, and enter state 13
	'for'          shift, and enter state 14
	'if'           shift, and enter state 15
	'int'          shift, and enter state 16
	'while'        shift, and enter state 17
	'{'            shift, and enter state 18
	'}'            reduce using rule 15
			(reduce using rule 13)

	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 4
	Exp            goto state 6
	Exp1           goto state 7
	Exp2           goto state 8
	ListStm        goto state 20
	Type           goto state 10
	Stm            goto state 11

State 19

	Ident -> L_ident .                                  (rule 2)

	'('            reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'='            reduce using rule 2
	'else'         reduce using rule 2
	'endif'        reduce using rule 2
	'float'        reduce using rule 2
	'for'          reduce using rule 2
	'if'           reduce using rule 2
	'int'          reduce using rule 2
	'while'        reduce using rule 2
	'{'            reduce using rule 2
	'}'            reduce using rule 2
	L_integ        reduce using rule 2
	L_ident        reduce using rule 2
	%eof           reduce using rule 2


State 20

	Stm -> '{' ListStm . '}'                            (rule 24)

	'}'            shift, and enter state 45


State 21

	Stm -> 'while' '(' . Exp ')' Stm                    (rule 25)

	'('            shift, and enter state 12
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 24
	Exp            goto state 44
	Exp1           goto state 7
	Exp2           goto state 8

State 22

	Stm -> 'if' '(' . Exp ')' Stm 'else' Stm            (rule 26)
	Stm -> 'if' '(' . Exp ')' Stm 'endif'               (rule 27)

	'('            shift, and enter state 12
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 24
	Exp            goto state 43
	Exp1           goto state 7
	Exp2           goto state 8

State 23

	Stm -> 'for' '(' . Stm ';' Exp ';' Stm ')' Stm      (rule 28)

	'('            shift, and enter state 12
	'float'        shift, and enter state 13
	'for'          shift, and enter state 14
	'if'           shift, and enter state 15
	'int'          shift, and enter state 16
	'while'        shift, and enter state 17
	'{'            shift, and enter state 18
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 4
	Exp            goto state 6
	Exp1           goto state 7
	Exp2           goto state 8
	Type           goto state 10
	Stm            goto state 42

State 24

	Exp2 -> Ident .                                     (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'/'            reduce using rule 11
	';'            reduce using rule 11
	'else'         reduce using rule 11
	'endif'        reduce using rule 11
	'float'        reduce using rule 11
	'for'          reduce using rule 11
	'if'           reduce using rule 11
	'int'          reduce using rule 11
	'while'        reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	L_integ        reduce using rule 11
	L_ident        reduce using rule 11
	%eof           reduce using rule 11


State 25

	Exp -> Exp . '+' Exp1                               (rule 4)
	Exp -> Exp . '-' Exp1                               (rule 5)
	Exp2 -> '(' Exp . ')'                               (rule 12)

	')'            shift, and enter state 41
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32


State 26

	ListStm -> Stm ListStm .                            (rule 14)

	'}'            reduce using rule 14
	%eof           reduce using rule 14


State 27

	ListStm -> Stm ';' . ListStm                        (rule 17)

	'('            shift, and enter state 12
	'float'        shift, and enter state 13
	'for'          shift, and enter state 14
	'if'           shift, and enter state 15
	'int'          shift, and enter state 16
	'while'        shift, and enter state 17
	'{'            shift, and enter state 18
	'}'            reduce using rule 15
			(reduce using rule 13)

	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19
	%eof           reduce using rule 15
			(reduce using rule 13)


	Integer        goto state 3
	Ident          goto state 4
	Exp            goto state 6
	Exp1           goto state 7
	Exp2           goto state 8
	ListStm        goto state 40
	Type           goto state 10
	Stm            goto state 11

State 28

	Stm -> Type Ident . '=' Exp                         (rule 21)
	Stm -> Type Ident .                                 (rule 22)

	'('            reduce using rule 22
	')'            reduce using rule 22
	';'            reduce using rule 22
	'='            shift, and enter state 39
	'else'         reduce using rule 22
	'endif'        reduce using rule 22
	'float'        reduce using rule 22
	'for'          reduce using rule 22
	'if'           reduce using rule 22
	'int'          reduce using rule 22
	'while'        reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	L_integ        reduce using rule 22
	L_ident        reduce using rule 22
	%eof           reduce using rule 22


State 29

	Exp1 -> Exp1 '*' . Exp2                             (rule 7)

	'('            shift, and enter state 12
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 24
	Exp2           goto state 38

State 30

	Exp1 -> Exp1 '/' . Exp2                             (rule 8)

	'('            shift, and enter state 12
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 24
	Exp2           goto state 37

State 31

	Exp -> Exp '+' . Exp1                               (rule 4)

	'('            shift, and enter state 12
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 24
	Exp1           goto state 36
	Exp2           goto state 8

State 32

	Exp -> Exp '-' . Exp1                               (rule 5)

	'('            shift, and enter state 12
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 24
	Exp1           goto state 35
	Exp2           goto state 8

State 33

	Stm -> Ident '=' . Exp                              (rule 23)

	'('            shift, and enter state 12
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 24
	Exp            goto state 34
	Exp1           goto state 7
	Exp2           goto state 8

State 34

	Exp -> Exp . '+' Exp1                               (rule 4)
	Exp -> Exp . '-' Exp1                               (rule 5)
	Stm -> Ident '=' Exp .                              (rule 23)

	'('            reduce using rule 23
	')'            reduce using rule 23
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	';'            reduce using rule 23
	'else'         reduce using rule 23
	'endif'        reduce using rule 23
	'float'        reduce using rule 23
	'for'          reduce using rule 23
	'if'           reduce using rule 23
	'int'          reduce using rule 23
	'while'        reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	L_integ        reduce using rule 23
	L_ident        reduce using rule 23
	%eof           reduce using rule 23


State 35

	Exp -> Exp '-' Exp1 .                               (rule 5)
	Exp1 -> Exp1 . '*' Exp2                             (rule 7)
	Exp1 -> Exp1 . '/' Exp2                             (rule 8)

	'('            reduce using rule 5
	')'            reduce using rule 5
	'*'            shift, and enter state 29
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'/'            shift, and enter state 30
	';'            reduce using rule 5
	'else'         reduce using rule 5
	'endif'        reduce using rule 5
	'float'        reduce using rule 5
	'for'          reduce using rule 5
	'if'           reduce using rule 5
	'int'          reduce using rule 5
	'while'        reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	L_integ        reduce using rule 5
	L_ident        reduce using rule 5
	%eof           reduce using rule 5


State 36

	Exp -> Exp '+' Exp1 .                               (rule 4)
	Exp1 -> Exp1 . '*' Exp2                             (rule 7)
	Exp1 -> Exp1 . '/' Exp2                             (rule 8)

	'('            reduce using rule 4
	')'            reduce using rule 4
	'*'            shift, and enter state 29
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'/'            shift, and enter state 30
	';'            reduce using rule 4
	'else'         reduce using rule 4
	'endif'        reduce using rule 4
	'float'        reduce using rule 4
	'for'          reduce using rule 4
	'if'           reduce using rule 4
	'int'          reduce using rule 4
	'while'        reduce using rule 4
	'{'            reduce using rule 4
	'}'            reduce using rule 4
	L_integ        reduce using rule 4
	L_ident        reduce using rule 4
	%eof           reduce using rule 4


State 37

	Exp1 -> Exp1 '/' Exp2 .                             (rule 8)

	'('            reduce using rule 8
	')'            reduce using rule 8
	'*'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'/'            reduce using rule 8
	';'            reduce using rule 8
	'else'         reduce using rule 8
	'endif'        reduce using rule 8
	'float'        reduce using rule 8
	'for'          reduce using rule 8
	'if'           reduce using rule 8
	'int'          reduce using rule 8
	'while'        reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	L_integ        reduce using rule 8
	L_ident        reduce using rule 8
	%eof           reduce using rule 8


State 38

	Exp1 -> Exp1 '*' Exp2 .                             (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	'*'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'/'            reduce using rule 7
	';'            reduce using rule 7
	'else'         reduce using rule 7
	'endif'        reduce using rule 7
	'float'        reduce using rule 7
	'for'          reduce using rule 7
	'if'           reduce using rule 7
	'int'          reduce using rule 7
	'while'        reduce using rule 7
	'{'            reduce using rule 7
	'}'            reduce using rule 7
	L_integ        reduce using rule 7
	L_ident        reduce using rule 7
	%eof           reduce using rule 7


State 39

	Stm -> Type Ident '=' . Exp                         (rule 21)

	'('            shift, and enter state 12
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 24
	Exp            goto state 49
	Exp1           goto state 7
	Exp2           goto state 8

State 40

	ListStm -> Stm ';' ListStm .                        (rule 17)

	'}'            reduce using rule 17
	%eof           reduce using rule 17


State 41

	Exp2 -> '(' Exp ')' .                               (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'/'            reduce using rule 12
	';'            reduce using rule 12
	'else'         reduce using rule 12
	'endif'        reduce using rule 12
	'float'        reduce using rule 12
	'for'          reduce using rule 12
	'if'           reduce using rule 12
	'int'          reduce using rule 12
	'while'        reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	L_integ        reduce using rule 12
	L_ident        reduce using rule 12
	%eof           reduce using rule 12


State 42

	Stm -> 'for' '(' Stm . ';' Exp ';' Stm ')' Stm      (rule 28)

	';'            shift, and enter state 48


State 43

	Exp -> Exp . '+' Exp1                               (rule 4)
	Exp -> Exp . '-' Exp1                               (rule 5)
	Stm -> 'if' '(' Exp . ')' Stm 'else' Stm            (rule 26)
	Stm -> 'if' '(' Exp . ')' Stm 'endif'               (rule 27)

	')'            shift, and enter state 47
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32


State 44

	Exp -> Exp . '+' Exp1                               (rule 4)
	Exp -> Exp . '-' Exp1                               (rule 5)
	Stm -> 'while' '(' Exp . ')' Stm                    (rule 25)

	')'            shift, and enter state 46
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32


State 45

	Stm -> '{' ListStm '}' .                            (rule 24)

	'('            reduce using rule 24
	')'            reduce using rule 24
	';'            reduce using rule 24
	'else'         reduce using rule 24
	'endif'        reduce using rule 24
	'float'        reduce using rule 24
	'for'          reduce using rule 24
	'if'           reduce using rule 24
	'int'          reduce using rule 24
	'while'        reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	L_integ        reduce using rule 24
	L_ident        reduce using rule 24
	%eof           reduce using rule 24


State 46

	Stm -> 'while' '(' Exp ')' . Stm                    (rule 25)

	'('            shift, and enter state 12
	'float'        shift, and enter state 13
	'for'          shift, and enter state 14
	'if'           shift, and enter state 15
	'int'          shift, and enter state 16
	'while'        shift, and enter state 17
	'{'            shift, and enter state 18
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 4
	Exp            goto state 6
	Exp1           goto state 7
	Exp2           goto state 8
	Type           goto state 10
	Stm            goto state 52

State 47

	Stm -> 'if' '(' Exp ')' . Stm 'else' Stm            (rule 26)
	Stm -> 'if' '(' Exp ')' . Stm 'endif'               (rule 27)

	'('            shift, and enter state 12
	'float'        shift, and enter state 13
	'for'          shift, and enter state 14
	'if'           shift, and enter state 15
	'int'          shift, and enter state 16
	'while'        shift, and enter state 17
	'{'            shift, and enter state 18
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 4
	Exp            goto state 6
	Exp1           goto state 7
	Exp2           goto state 8
	Type           goto state 10
	Stm            goto state 51

State 48

	Stm -> 'for' '(' Stm ';' . Exp ';' Stm ')' Stm      (rule 28)

	'('            shift, and enter state 12
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 24
	Exp            goto state 50
	Exp1           goto state 7
	Exp2           goto state 8

State 49

	Exp -> Exp . '+' Exp1                               (rule 4)
	Exp -> Exp . '-' Exp1                               (rule 5)
	Stm -> Type Ident '=' Exp .                         (rule 21)

	'('            reduce using rule 21
	')'            reduce using rule 21
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	';'            reduce using rule 21
	'else'         reduce using rule 21
	'endif'        reduce using rule 21
	'float'        reduce using rule 21
	'for'          reduce using rule 21
	'if'           reduce using rule 21
	'int'          reduce using rule 21
	'while'        reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	L_integ        reduce using rule 21
	L_ident        reduce using rule 21
	%eof           reduce using rule 21


State 50

	Exp -> Exp . '+' Exp1                               (rule 4)
	Exp -> Exp . '-' Exp1                               (rule 5)
	Stm -> 'for' '(' Stm ';' Exp . ';' Stm ')' Stm      (rule 28)

	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	';'            shift, and enter state 55


State 51

	Stm -> 'if' '(' Exp ')' Stm . 'else' Stm            (rule 26)
	Stm -> 'if' '(' Exp ')' Stm . 'endif'               (rule 27)

	'else'         shift, and enter state 53
	'endif'        shift, and enter state 54


State 52

	Stm -> 'while' '(' Exp ')' Stm .                    (rule 25)

	'('            reduce using rule 25
	')'            reduce using rule 25
	';'            reduce using rule 25
	'else'         reduce using rule 25
	'endif'        reduce using rule 25
	'float'        reduce using rule 25
	'for'          reduce using rule 25
	'if'           reduce using rule 25
	'int'          reduce using rule 25
	'while'        reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	L_integ        reduce using rule 25
	L_ident        reduce using rule 25
	%eof           reduce using rule 25


State 53

	Stm -> 'if' '(' Exp ')' Stm 'else' . Stm            (rule 26)

	'('            shift, and enter state 12
	'float'        shift, and enter state 13
	'for'          shift, and enter state 14
	'if'           shift, and enter state 15
	'int'          shift, and enter state 16
	'while'        shift, and enter state 17
	'{'            shift, and enter state 18
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 4
	Exp            goto state 6
	Exp1           goto state 7
	Exp2           goto state 8
	Type           goto state 10
	Stm            goto state 57

State 54

	Stm -> 'if' '(' Exp ')' Stm 'endif' .               (rule 27)

	'('            reduce using rule 27
	')'            reduce using rule 27
	';'            reduce using rule 27
	'else'         reduce using rule 27
	'endif'        reduce using rule 27
	'float'        reduce using rule 27
	'for'          reduce using rule 27
	'if'           reduce using rule 27
	'int'          reduce using rule 27
	'while'        reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	L_integ        reduce using rule 27
	L_ident        reduce using rule 27
	%eof           reduce using rule 27


State 55

	Stm -> 'for' '(' Stm ';' Exp ';' . Stm ')' Stm      (rule 28)

	'('            shift, and enter state 12
	'float'        shift, and enter state 13
	'for'          shift, and enter state 14
	'if'           shift, and enter state 15
	'int'          shift, and enter state 16
	'while'        shift, and enter state 17
	'{'            shift, and enter state 18
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 4
	Exp            goto state 6
	Exp1           goto state 7
	Exp2           goto state 8
	Type           goto state 10
	Stm            goto state 56

State 56

	Stm -> 'for' '(' Stm ';' Exp ';' Stm . ')' Stm      (rule 28)

	')'            shift, and enter state 58


State 57

	Stm -> 'if' '(' Exp ')' Stm 'else' Stm .            (rule 26)

	'('            reduce using rule 26
	')'            reduce using rule 26
	';'            reduce using rule 26
	'else'         reduce using rule 26
	'endif'        reduce using rule 26
	'float'        reduce using rule 26
	'for'          reduce using rule 26
	'if'           reduce using rule 26
	'int'          reduce using rule 26
	'while'        reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	L_integ        reduce using rule 26
	L_ident        reduce using rule 26
	%eof           reduce using rule 26


State 58

	Stm -> 'for' '(' Stm ';' Exp ';' Stm ')' . Stm      (rule 28)

	'('            shift, and enter state 12
	'float'        shift, and enter state 13
	'for'          shift, and enter state 14
	'if'           shift, and enter state 15
	'int'          shift, and enter state 16
	'while'        shift, and enter state 17
	'{'            shift, and enter state 18
	L_integ        shift, and enter state 2
	L_ident        shift, and enter state 19

	Integer        goto state 3
	Ident          goto state 4
	Exp            goto state 6
	Exp1           goto state 7
	Exp2           goto state 8
	Type           goto state 10
	Stm            goto state 59

State 59

	Stm -> 'for' '(' Stm ';' Exp ';' Stm ')' Stm .      (rule 28)

	'('            reduce using rule 28
	')'            reduce using rule 28
	';'            reduce using rule 28
	'else'         reduce using rule 28
	'endif'        reduce using rule 28
	'float'        reduce using rule 28
	'for'          reduce using rule 28
	'if'           reduce using rule 28
	'int'          reduce using rule 28
	'while'        reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	L_integ        reduce using rule 28
	L_ident        reduce using rule 28
	%eof           reduce using rule 28


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 29
Number of terminals: 19
Number of non-terminals: 10
Number of states: 60

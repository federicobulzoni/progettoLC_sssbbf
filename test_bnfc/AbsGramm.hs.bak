-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsGramm where

newtype Id = Id ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

data Program = Prog [Decl]
  deriving (Eq, Ord, Show, Read)

data Decl
    = DFunInLine Id [Args] Type Exp
    | DFunBlock Id [Args] Type Block
    | DecVar Id Type
    | DefVar Id Type Exp
  deriving (Eq, Ord, Show, Read)

data Args = DArgs [Arg]
  deriving (Eq, Ord, Show, Read)

data Arg = DArg Id Type
  deriving (Eq, Ord, Show, Read)

data Exp
    = EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EInt Integer
    | EVar Id
  deriving (Eq, Ord, Show, Read)

data Type = Type_float | Type_int
  deriving (Eq, Ord, Show, Read)

data Stm
    = Decla Decl
    | Expr Exp
    | SBlock Block
    | Assign Id Exp
    | While Exp Stm
    | If Exp Stm Stm
  deriving (Eq, Ord, Show, Read)

data Block = DBlock [Stm]
  deriving (Eq, Ord, Show, Read)

